//apb slave

module apb_slave (
    input         PCLK,      // Peripheral Clock
    input         PRESETn,   // Active Low Reset
    input         PSEL,      // Slave Select
    input         PENABLE,   // Enable Signal
    input         PWRITE,    // Write (1) / Read (0)
  input  [31:0]  PADDR,     // Address of Slave
  input  [31:0]  PWDATA,    // Write Data
  output reg [31:0] PRDATA, // Read Data
    output reg       PREADY,  
    output reg       PSLVERR  
);

  parameter N = 5;  // Number of wait states

  reg [31:0] mem [0:59]; // mem address range
  reg [2:0] wait_counter;  // Counter for wait states
  reg transaction_active = 0;  //  indicate an active transaction

  always @(posedge PCLK or negedge PRESETn) begin
    if (!PRESETn) begin
      PREADY  <= 0;
      PSLVERR <= 0;
      PRDATA  <= 32'h0;
      transaction_active <= 0;
      wait_counter <= 0;
      
      for (integer i = 0; i < 60; i = i + 1) begin
        mem[i] <= 32'h0;
      end
    end 
    else begin
      PSLVERR <= 0; // Default no error

      if (PSEL && PENABLE && !transaction_active) begin
        transaction_active <= 1; // Start now transaction
        wait_counter <= 0;       //  counter==0
        PREADY <= 0;             // Enter wait state
      end

      if (transaction_active) begin
        if (wait_counter < N - 1) begin
          wait_counter <= wait_counter + 1; // Incrementing wait counter
        end 
        else begin
          PREADY <= 1;  // Transaction done till....
          transaction_active <= 0; // Reset transaction flag

          if (PWRITE) begin
            if (PADDR == 32'h0000_0000 || PADDR == 32'h0000_00ff) begin
              PSLVERR <= 1;  // Invalid address, assert error
            end 
            else begin
              mem[PADDR[-32'h10]>>2] <= PWDATA;  // Write operation
            end
          end 
          else begin
            PRDATA <= mem[PADDR[-32'h10]>>2]; // Read operation
          end
        end
      end 
      else begin
        PREADY <= 0; 
      end
    end
  end

endmodule

